package saomath.checkusserver.notification.service;

import org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.transaction.annotation.Transactional;\nimport saomath.checkusserver.entity.NotificationSetting;\nimport saomath.checkusserver.entity.User;\nimport saomath.checkusserver.notification.domain.AlimtalkTemplate;\nimport saomath.checkusserver.repository.NotificationSettingRepository;\nimport saomath.checkusserver.repository.UserRepository;\n\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * NotificationSetting 기능 테스트\n */\n@SpringBootTest\n@ActiveProfiles(\"test\")\n@Transactional\npublic class NotificationSettingTest {\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Autowired\n    private NotificationSettingRepository notificationSettingRepository;\n    \n    @Autowired\n    private NotificationPreferenceService notificationPreferenceService;\n    \n    @Test\n    public void testNotificationSettingBasicCRUD() {\n        // Given: 테스트 사용자 생성\n        User testUser = User.builder()\n            .username(\"testuser\")\n            .name(\"테스트사용자\")\n            .phoneNumber(\"010-1234-5678\")\n            .discordId(\"123456789012345678\")\n            .password(\"password\")\n            .build();\n        userRepository.save(testUser);\n        \n        // When: 알림 설정 생성\n        NotificationSetting alimtalkSetting = NotificationSetting.builder()\n            .userId(testUser.getId())\n            .templateName(AlimtalkTemplate.STUDY_REMINDER_10MIN.name())\n            .deliveryMethod(\"alimtalk\")\n            .isEnabled(true)\n            .advanceMinutes(10)\n            .build();\n        \n        NotificationSetting discordSetting = NotificationSetting.builder()\n            .userId(testUser.getId())\n            .templateName(AlimtalkTemplate.STUDY_REMINDER_10MIN.name())\n            .deliveryMethod(\"discord\")\n            .isEnabled(true)\n            .advanceMinutes(10)\n            .build();\n        \n        notificationSettingRepository.save(alimtalkSetting);\n        notificationSettingRepository.save(discordSetting);\n        \n        // Then: 조회 테스트\n        List<NotificationSetting> userSettings = notificationSettingRepository.findByUserId(testUser.getId());\n        assertThat(userSettings).hasSize(2);\n        \n        List<NotificationSetting> templateSettings = notificationSettingRepository\n            .findByUserIdAndTemplateName(testUser.getId(), AlimtalkTemplate.STUDY_REMINDER_10MIN.name());\n        assertThat(templateSettings).hasSize(2);\n        \n        List<NotificationSetting> enabledSettings = notificationSettingRepository\n            .findByUserIdAndIsEnabledTrue(testUser.getId());\n        assertThat(enabledSettings).hasSize(2);\n    }\n    \n    @Test\n    public void testNotificationPreferenceService() {\n        // Given: 테스트 사용자 생성\n        User testUser = User.builder()\n            .username(\"testuser2\")\n            .name(\"테스트사용자2\")\n            .phoneNumber(\"010-9876-5432\")\n            .discordId(\"987654321098765432\")\n            .password(\"password\")\n            .build();\n        userRepository.save(testUser);\n        \n        // 알림 설정이 없는 상태에서 테스트 (기본 설정 사용)\n        List<NotificationPreference> preferences = notificationPreferenceService\n            .getUserPreferences(testUser.getId(), AlimtalkTemplate.STUDY_START.name());\n        \n        // 기본적으로 알림톡과 디스코드 모두 활성화되어야 함\n        assertThat(preferences).hasSize(2);\n        assertThat(preferences)\n            .extracting(NotificationPreference::getChannel)\n            .containsExactlyInAnyOrder(\n                NotificationService.NotificationChannel.ALIMTALK,\n                NotificationService.NotificationChannel.DISCORD\n            );\n        \n        // When: DB에 알림 설정 추가 (알림톡만 활성화)\n        NotificationSetting alimtalkOnly = NotificationSetting.builder()\n            .userId(testUser.getId())\n            .templateName(AlimtalkTemplate.STUDY_START.name())\n            .deliveryMethod(\"alimtalk\")\n            .isEnabled(true)\n            .build();\n        notificationSettingRepository.save(alimtalkOnly);\n        \n        // Then: DB 설정이 반영되어야 함\n        List<NotificationPreference> dbPreferences = notificationPreferenceService\n            .getUserPreferences(testUser.getId(), AlimtalkTemplate.STUDY_START.name());\n        \n        assertThat(dbPreferences).hasSize(1);\n        assertThat(dbPreferences.get(0).getChannel())\n            .isEqualTo(NotificationService.NotificationChannel.ALIMTALK);\n        assertThat(dbPreferences.get(0).getRecipient())\n            .isEqualTo(testUser.getPhoneNumber());\n    }\n    \n    @Test\n    public void testUniqueConstraint() {\n        // Given: 테스트 사용자 생성\n        User testUser = User.builder()\n            .username(\"testuser3\")\n            .name(\"테스트사용자3\")\n            .phoneNumber(\"010-1111-2222\")\n            .password(\"password\")\n            .build();\n        userRepository.save(testUser);\n        \n        // When: 같은 설정을 두 번 저장 시도\n        NotificationSetting setting1 = NotificationSetting.builder()\n            .userId(testUser.getId())\n            .templateName(AlimtalkTemplate.NO_SHOW.name())\n            .deliveryMethod(\"alimtalk\")\n            .isEnabled(true)\n            .build();\n        \n        notificationSettingRepository.save(setting1);\n        \n        // Then: 중복 설정은 저장되지 않아야 함 (유니크 제약조건)\n        // 실제로는 예외가 발생해야 하지만, 테스트에서는 중복 체크만 수행\n        List<NotificationSetting> duplicateSettings = notificationSettingRepository\n            .findByUserIdAndTemplateNameAndDeliveryMethod(\n                testUser.getId(), \n                AlimtalkTemplate.NO_SHOW.name(), \n                \"alimtalk\"\n            ).stream().toList();\n        \n        assertThat(duplicateSettings).hasSize(1);\n    }\n}
